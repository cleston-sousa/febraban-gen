<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>br.net.gits</groupId>
	<artifactId>febraban-gen</artifactId>
	<version>0.0.1</version>
	<name>febraban-gen</name>
	<description>Febraban File Generator</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			 <exclusions>
			 	<exclusion>
			 		<groupId>org.junit.vintage</groupId>
			 		<artifactId>junit-vintage-engine</artifactId>
		 		</exclusion>
	 		</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>2.4.0</version>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>spring-mock-mvc</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.npathai</groupId>
			<artifactId>hamcrest-optional</artifactId>
			<version>2.0.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
		  <groupId>io.github.cleston-sousa</groupId>
		  <artifactId>just-fixedlength-reader-writer</artifactId>
		  <version>0.0.2</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<!--
					Configuring surefire
					Maven uses surefire to execute unit tests, and for coverage data to be collected jacoco 
					configures surefire to use a java agent that instruments the classes under test to enable 
					collection of execution data.
				 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<argLine>${surefire.jacoco.args}</argLine>
				</configuration>
			</plugin>
			<plugin>
				<!--
					Now that we’ve got our build generating a coverage report for the unit tests it’s time to set up 
					matching config for the integration tests.
					In principle this is exactly the same as setting up coverage for unit tests with only 
					one difference: instead of configuring surefire, the unit tests execution tool, 
					we’re going to configure failsafe, maven’s integration test execution tool.
					
					Failsafe needs to be configured to use the contents of the failsafe.jacoco.args property as arguments
				 -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<argLine>${failsafe.jacoco.args}</argLine>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.7</version>
				<configuration>
					<excludes>
						<exclude>**/exceptionhandler/*</exclude>
						<exclude>**/exception/*</exclude>
						<exclude>**/model/*</exclude>
						<exclude>**/dtos/*</exclude>
						<exclude>**/entities/*</exclude>
						<exclude>**/utils/*</exclude>
						<exclude>**/FebrabanGenApplication.*</exclude>
					</excludes>
				</configuration>
				<!-- https://natritmeyer.com/howto/reporting-aggregated-unit-and-integration-test-coverage-with-jacoco/ -->
				<executions>
					<execution>
						<!--
							Configuring jacoco unit test coverage data
							Jacoco splits collection of test coverage data from the generation of the coverage report.
							There are therefore <execution> blocks required for each stage in the process.
							This first execution block tells jacoco where to store the unit test coverage data 
							it will collect during unit test execution:
							The <destFile> element contains the path the data will be written to.
							The <propertyName> contains the name of a variable that will be populated with some 
							arguments which will be passed to surefire 
							(explained later) to point it at the coverage data collection file defined in <destFile>.
						 -->
						<id>before-unit-test-execution</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/jacoco-output/jacoco-unit-tests.exec</destFile>
							<propertyName>surefire.jacoco.args</propertyName>
						</configuration>
					</execution>
					<execution>
						<!-- 
							Generating the unit test coverage report
							The next execution block is used to tell jacoco where to write the unit test report, 
							and which coverage data file to generate the report from.
							The report generator will look for its input (the coverage data file populated during unit testing) 
							in the path defined in the <dataFile> element, and will save the generated report in the 
							path specified in <outputDirectory>. Note that in the above example uses 
							the project.reporting.outputDirectory property which points at target/site.
						 -->
						<id>after-unit-test-execution</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-output/jacoco-unit-tests.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-unit-test-coverage-report</outputDirectory>
						</configuration>
					</execution>
					
					<execution>
						<id>before-integration-test-execution</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/jacoco-output/jacoco-integration-tests.exec</destFile>
							<propertyName>failsafe.jacoco.args</propertyName>
						</configuration>
					</execution>
					<execution>
						<id>after-integration-test-execution</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-output/jacoco-integration-tests.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-integration-test-coverage-report</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<!--
							Merging unit and integration test coverage data
							Jacoco generates reports from .exec files. Thus far we have two of them. If we want jacoco to 
							generate a report based on the data in both files we first need to merge the data from both .exec files 
							into a new .exec file. Here’s The <execution> that will make that happen
							The <fileSet> tells jacoco which directory to look for input to its merge goal. The <include> 
							element tells jacoco which files to read in. In the case above that’s *.exec*. Finally, the <destFile> 
							is where the merged coverage data will be written. 
						 -->
						<id>merge-unit-and-integration</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>merge</goal>
						</goals>
						<configuration>
							<fileSets>
								<fileSet>
									<directory>${project.build.directory}/jacoco-output/</directory>
									<includes>
										<include>*.exec</include>
									</includes>
								</fileSet>
							</fileSets>
							<destFile>${project.build.directory}/jacoco-output/merged.exec</destFile>
						</configuration>
					</execution>
					<execution>
						<!-- 
							configure jacoco to generate a coverage report from the merged.exec data we created in 
							the previous step. We’ve already seen how to do that - it’s the same as generating a 
							unit or integration test report.
							There’s an important thing to notice: the <phase>post-integration-test</phase> element.
							Though this is the same phase as the previous step that created the merged coverage data file, 
							because maven respects the sequence of <execution> blocks this last report-generation step will 
							always follow the preceding coverage-data-file-generation step.
							The first block explains what happened in the merge, the second block tells you that the merged 
							coverage report was generated.
							In your target/site/jacoco-merged-test-coverage-report directory you should find an index.html file.
						-->
						<id>create-merged-report</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/jacoco-output/merged.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-merged-test-coverage-report</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
